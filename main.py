import os
import json
import logging
import pdfplumber
import pdf2image
import openai
import pandas as pd
from dotenv import load_dotenv
from workers.worker_pdfplumber import extract_tables_from_pdf
from workers.worker_image_preprocess import process_ocr_with_langchain, extract_text_ocr
from workers.worker_pdf_mix import process_pdf_combined

# üîπ Carregar vari√°veis do .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# üîπ Configura√ß√£o do logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

# üîπ Caminhos da aplica√ß√£o
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
INPUT_DIR = os.path.join(BASE_DIR, "media", "input")
OUTPUT_DIR = os.path.join(BASE_DIR, "media", "output")
os.makedirs(OUTPUT_DIR, exist_ok=True)

# üîπ Caminho do CSV consolidado
output_csv = os.path.join(OUTPUT_DIR, "resultado_imoveis.csv")


def check_pdf_content(pdf_path):
    """
    Verifica se o PDF cont√©m texto extra√≠vel e/ou imagens incorporadas.
    Retorna:
    - "TABELA" se houver texto extra√≠vel significativo.
    - "IMAGEM" se n√£o houver texto, mas houver imagens.
    - "MIX" se houver texto e imagens simultaneamente.
    - None se n√£o conseguir determinar.
    """
    has_text = False
    has_images = False
    min_text_length = 50  # Definir um m√≠nimo de caracteres reais para ser "TABELA"

    try:
        extracted_text = ""

        # üîç Teste de texto extra√≠vel
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    extracted_text += text

        # üñºÔ∏è Teste de imagens embutidas
        images = pdf2image.convert_from_path(pdf_path)
        if images:
            has_images = True

        # Se o texto extra√≠do for muito pequeno, tratar como IMAGEM
        if len(extracted_text.strip()) < min_text_length:
            has_text = False
        else:
            has_text = True

    except Exception as e:
        logging.error(f"‚ö†Ô∏è Erro ao processar PDF {pdf_path}: {e}")
        return None

    # üîπ Classifica√ß√£o final com base nas verifica√ß√µes
    if has_text and has_images:
        return "MIX"
    elif has_text:
        return "TABELA"
    elif has_images:
        return "IMAGEM"
    else:
        return None


def identify_pdf_type(pdf_path):
    """
    Identifica o tipo do PDF primeiro com testes diretos, depois complementa com IA se necess√°rio.
    """
    logging.info(f"üìå Identificando tipo de PDF: {pdf_path}")

    # üîπ Primeiro, verifica se h√° texto ou imagens diretamente no documento
    detected_type = check_pdf_content(pdf_path)

    # Se j√° determinamos que √© IMAGEM, TABELA ou MIX, n√£o precisa de IA
    if detected_type:
        logging.info(f"‚úÖ Tipo de PDF identificado automaticamente: {detected_type}")
        return detected_type

    # Se n√£o conseguimos identificar, chamamos a IA para decidir
    logging.info(f"ü§ñ IA ajudar√° a identificar o tipo do PDF...")

    prompt = f"""
    O arquivo PDF cont√©m **informa√ß√µes imobili√°rias** e pode conter diferentes formatos.  
    Sua tarefa √© **analisar cuidadosamente** o conte√∫do e classificar corretamente o **tipo** do documento entre **tr√™s categorias**.

    ### **Crit√©rios obrigat√≥rios:**
    - **'TABELA'** ‚Üí O PDF cont√©m **tabelas estruturadas reais**, com colunas bem definidas e dados extra√≠veis por sistemas de processamento.  
      - As tabelas devem ser reconhecidas **diretamente como texto** no documento (n√£o em imagens).  
      - **Se houver apenas imagens de tabelas (digitalizadas ou escaneadas), marque como 'IMAGEM'.**  

    - **'IMAGEM'** ‚Üí O PDF cont√©m **apenas imagens**, sem tabelas extra√≠veis diretamente (OCR necess√°rio).  
      - Se todas as tabelas estiverem embutidas em imagens, marque **'IMAGEM'**.  

    - **'MIX'** ‚Üí O PDF cont√©m **tabelas extra√≠veis e imagens ao mesmo tempo**.  
      - **Somente selecione 'MIX' se houver tabelas extra√≠veis reais e imagens significativas ao mesmo tempo.**  

    ‚ùó **IMPORTANTE:**  
    üîπ **Responda exclusivamente com uma das seguintes palavras:**  
      - TABELA  
      - IMAGEM  
      - MIX  
    üîπ **N√£o inclua explica√ß√µes ou qualquer outro texto na resposta.**

    üîç **Nome do arquivo PDF analisado**: {os.path.basename(pdf_path)}
    """

    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )

    doc_type = response.choices[0].message.content.strip()
    logging.info(f"‚úÖ PDF identificado pela IA como: {doc_type}")
    return doc_type


def process_pdf(pdf_path):
    """
    Determina qual worker usar e processa o PDF de maneira adequada.
    """
    logging.info(f"üìÇ Processando PDF: {pdf_path}")

    # Nome do arquivo PDF sem extens√£o
    file_name = os.path.splitext(os.path.basename(pdf_path))[0]

    # **1Ô∏è‚É£ Identifica√ß√£o Autom√°tica do Tipo de PDF**
    doc_type = identify_pdf_type(pdf_path)

    # **2Ô∏è‚É£ Supervisor pode sobrescrever o tipo, se necess√°rio**
    logging.info(f"‚öôÔ∏è Supervisor pode alterar a escolha autom√°tica do worker.")

    # **3Ô∏è‚É£ Escolhe o worker correto com base no tipo identificado**
    extracted_data = None

    if doc_type == "TABELA":
        logging.info("üìä Usando worker de tabelas estruturadas (pdfplumber)")
        extracted_data = extract_tables_from_pdf(pdf_path)

    elif doc_type == "IMAGEM":
        logging.info("üñºÔ∏è Usando worker de pr√©-processamento de imagem e OCR")
        extracted_data = extract_text_ocr(pdf_path)

        # **Processamento adicional com IA via LangChain**
        if extracted_data and "ocr_text" in extracted_data:
            extracted_data = process_ocr_with_langchain(extracted_data)

    elif doc_type == "MIX":
        logging.info("üîÄ Usando worker com dados mistos de PDF")
        extracted_data = process_pdf_combined(pdf_path)

    else:
        logging.error(f"‚ö†Ô∏è Erro: Tipo de PDF desconhecido ({pdf_path})")
        return

    # **4Ô∏è‚É£ Verifica se houve extra√ß√£o v√°lida**
    if not extracted_data:
        logging.warning(f"‚ö†Ô∏è Nenhum dado extra√≠do do PDF {pdf_path}. Pulando para o pr√≥ximo arquivo.")
        return

    # **6Ô∏è‚É£ Salva o JSON estruturado**
    json_output_path = os.path.join(OUTPUT_DIR, f"{file_name}.json")
    with open(json_output_path, "w", encoding="utf-8") as json_file:
        json.dump(extracted_data, json_file, indent=4, ensure_ascii=False)
    logging.info(f"‚úÖ JSON salvo: {json_output_path}")

    # **7Ô∏è‚É£ Cria√ß√£o ou atualiza√ß√£o do CSV Consolidado**
    df = pd.DataFrame(extracted_data)

    # üîπ Remove colunas extras, mantendo apenas as necess√°rias
    df = df.loc[:, ["nome_empreendimento", "unidade", "disponibilidade", "valor"]]

    # üîπ Substitui ',' em valores para garantir que o separador decimal n√£o quebre o CSV
    df["valor"] = df["valor"].astype(str).str.replace(".", "", regex=False)  # Remove milhar
    df["valor"] = df["valor"].str.replace(",", ".", regex=False)  # Transforma decimal

    if os.path.exists(output_csv):
        df.to_csv(output_csv, sep=";", index=False, mode="a", header=False, encoding="utf-8")
    else:
        df.to_csv(output_csv, sep=";", index=False, encoding="utf-8")

    logging.info(f"üìÇ Dados do arquivo {file_name} adicionados ao CSV consolidado: {output_csv}")


# **Executa o processo para cada PDF individualmente**
for pdf in os.listdir(INPUT_DIR):
    if pdf.endswith(".pdf"):
        process_pdf(os.path.join(INPUT_DIR, pdf))
